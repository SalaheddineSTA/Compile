Terminals unused in grammar

   ACCOLADEGauche
   ACCOLADEDroite


Grammar

    0 $accept: S $end

    1 S: PROGRAM IDF Declaration Begin Instruction End IDF

    2 TYPE: INT
    3     | CHR
    4     | FLT

    5 Declaration: listaVariable PNTV Declaration
    6            | CONSTANT IDF AFFECTATION valeur PNTV Declaration
    7            | /* empty */

    8 listaVariable: IDF sep listaVariable
    9              | IDF sepa TYPE

   10 sep: VIRGULE
   11    | CROCHETGauche ENTIER CROCHETDroite VIRGULE

   12 sepa: DEUXP
   13     | CROCHETGauche ENTIER CROCHETDroite DEUXP

   14 Instruction: Aff Instruction
   15            | IFCdn Instruction
   16            | CASECdn Instruction
   17            | loop Instruction
   18            | /* empty */

   19 Aff: IDF AFFECTATION expressionA PNTV
   20    | IDF CROCHETGauche ENTIER CROCHETDroite AFFECTATION expressionA PNTV

   21 expressionA: expressionA PLUS expressionA
   22            | expressionA MINUS expressionA
   23            | expressionA MUL expressionA
   24            | expressionA DIV expressionA
   25            | expressionA POW expressionA
   26            | IDF CROCHETGauche ENTIER CROCHETDroite
   27            | IDF
   28            | valeur

   29 expressionC: expressionA SUP expressionA
   30            | expressionA INF expressionA
   31            | expressionA EQUAL expressionA
   32            | expressionA SUPEQUAL expressionA
   33            | expressionA INFEQUAL expressionA
   34            | expressionA DIFF expressionA
   35            | expressionC AND expressionC
   36            | expressionC OR expressionC
   37            | NOT expressionC
   38            | expressionA

   39 valeur: REEL
   40       | ENTIER
   41       | CCHAR

   42 $@1: /* empty */

   43 IFCdn: IF PARENTHESEGauche expressionC PARENTHESEDroite $@1 THEN Instruction elsebloc ENDIF

   44 $@2: /* empty */

   45 elsebloc: ELSE $@2 Instruction
   46         | /* empty */

   47 $@3: /* empty */

   48 $@4: /* empty */

   49 CASECdn: CASE PARENTHESEGauche IDF $@3 PARENTHESEDroite blocCase $@4 ENDCASE

   50 $@5: /* empty */

   51 blocCase: CHECK condition1 expressionA $@5 SO Instruction blockEnd blocCase

   52 $@6: /* empty */

   53 blocCase: DEFAULT $@6 Instruction
   54         | /* empty */

   55 blockEnd: ENDCHECK
   56         | /* empty */

   57 condition1: SUP
   58           | INF
   59           | EQUAL
   60           | SUPEQUAL
   61           | INFEQUAL
   62           | DIFF

   63 $@7: /* empty */

   64 $@8: /* empty */

   65 $@9: /* empty */

   66 $@10: /* empty */

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR

   68 Aff1: IDF AFFECTATION expressionA


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
Begin (259) 1
End (260) 1
CONSTANT (261) 6
INT (262) 2
FLT (263) 4
CHR (264) 3
IF (265) 43
THEN (266) 43
ELSE (267) 45
ENDIF (268) 43
CASE (269) 49
CHECK (270) 51
SO (271) 51
ENDCHECK (272) 55
DEFAULT (273) 53
ENDCASE (274) 49
FOR (275) 67
DO (276) 67
ENDFOR (277) 67
IDF (278) 1 6 8 9 19 20 26 27 49 68
REEL (279) 39
ENTIER (280) 11 13 20 26 40
CCHAR (281) 41
PLUS (282) 21
MINUS (283) 22
MUL (284) 23
DIV (285) 24
POW (286) 25
SUP (287) 29 57
INF (288) 30 58
EQUAL (289) 31 59
DIFF (290) 34 62
SUPEQUAL (291) 32 60
INFEQUAL (292) 33 61
AND (293) 35
OR (294) 36
NOT (295) 37
AFFECTATION (296) 6 19 20 68
PARENTHESEGauche (297) 43 49 67
PARENTHESEDroite (298) 43 49 67
CROCHETGauche (299) 11 13 20 26
CROCHETDroite (300) 11 13 20 26
ACCOLADEGauche (301)
ACCOLADEDroite (302)
PNTV (303) 5 6 19 20 67
DEUXP (304) 12 13
VIRGULE (305) 10 11


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
S (52)
    on left: 1, on right: 0
TYPE (53)
    on left: 2 3 4, on right: 9
Declaration (54)
    on left: 5 6 7, on right: 1 5 6
listaVariable (55)
    on left: 8 9, on right: 5 8
sep (56)
    on left: 10 11, on right: 8
sepa (57)
    on left: 12 13, on right: 9
Instruction (58)
    on left: 14 15 16 17 18, on right: 1 14 15 16 17 43 45 51 53 67
Aff (59)
    on left: 19 20, on right: 14 67
expressionA (60)
    on left: 21 22 23 24 25 26 27 28, on right: 19 20 21 22 23 24 25
    29 30 31 32 33 34 38 51 68
expressionC (61)
    on left: 29 30 31 32 33 34 35 36 37 38, on right: 35 36 37 43 67
valeur (62)
    on left: 39 40 41, on right: 6 28
IFCdn (63)
    on left: 43, on right: 15
$@1 (64)
    on left: 42, on right: 43
elsebloc (65)
    on left: 45 46, on right: 43
$@2 (66)
    on left: 44, on right: 45
CASECdn (67)
    on left: 49, on right: 16
$@3 (68)
    on left: 47, on right: 49
$@4 (69)
    on left: 48, on right: 49
blocCase (70)
    on left: 51 53 54, on right: 49 51
$@5 (71)
    on left: 50, on right: 51
$@6 (72)
    on left: 52, on right: 53
blockEnd (73)
    on left: 55 56, on right: 51
condition1 (74)
    on left: 57 58 59 60 61 62, on right: 51
loop (75)
    on left: 67, on right: 17
$@7 (76)
    on left: 63, on right: 67
$@8 (77)
    on left: 64, on right: 67
$@9 (78)
    on left: 65, on right: 67
$@10 (79)
    on left: 66, on right: 67
Aff1 (80)
    on left: 68, on right: 67


state 0

    0 $accept: . S $end

    PROGRAM  shift, and go to state 1

    S  go to state 2


state 1

    1 S: PROGRAM . IDF Declaration Begin Instruction End IDF

    IDF  shift, and go to state 3


state 2

    0 $accept: S . $end

    $end  shift, and go to state 4


state 3

    1 S: PROGRAM IDF . Declaration Begin Instruction End IDF

    CONSTANT  shift, and go to state 5
    IDF       shift, and go to state 6

    $default  reduce using rule 7 (Declaration)

    Declaration    go to state 7
    listaVariable  go to state 8


state 4

    0 $accept: S $end .

    $default  accept


state 5

    6 Declaration: CONSTANT . IDF AFFECTATION valeur PNTV Declaration

    IDF  shift, and go to state 9


state 6

    8 listaVariable: IDF . sep listaVariable
    9              | IDF . sepa TYPE

    CROCHETGauche  shift, and go to state 10
    DEUXP          shift, and go to state 11
    VIRGULE        shift, and go to state 12

    sep   go to state 13
    sepa  go to state 14


state 7

    1 S: PROGRAM IDF Declaration . Begin Instruction End IDF

    Begin  shift, and go to state 15


state 8

    5 Declaration: listaVariable . PNTV Declaration

    PNTV  shift, and go to state 16


state 9

    6 Declaration: CONSTANT IDF . AFFECTATION valeur PNTV Declaration

    AFFECTATION  shift, and go to state 17


state 10

   11 sep: CROCHETGauche . ENTIER CROCHETDroite VIRGULE
   13 sepa: CROCHETGauche . ENTIER CROCHETDroite DEUXP

    ENTIER  shift, and go to state 18


state 11

   12 sepa: DEUXP .

    $default  reduce using rule 12 (sepa)


state 12

   10 sep: VIRGULE .

    $default  reduce using rule 10 (sep)


state 13

    8 listaVariable: IDF sep . listaVariable

    IDF  shift, and go to state 6

    listaVariable  go to state 19


state 14

    9 listaVariable: IDF sepa . TYPE

    INT  shift, and go to state 20
    FLT  shift, and go to state 21
    CHR  shift, and go to state 22

    TYPE  go to state 23


state 15

    1 S: PROGRAM IDF Declaration Begin . Instruction End IDF

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 28
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 16

    5 Declaration: listaVariable PNTV . Declaration

    CONSTANT  shift, and go to state 5
    IDF       shift, and go to state 6

    $default  reduce using rule 7 (Declaration)

    Declaration    go to state 33
    listaVariable  go to state 8


state 17

    6 Declaration: CONSTANT IDF AFFECTATION . valeur PNTV Declaration

    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    valeur  go to state 37


state 18

   11 sep: CROCHETGauche ENTIER . CROCHETDroite VIRGULE
   13 sepa: CROCHETGauche ENTIER . CROCHETDroite DEUXP

    CROCHETDroite  shift, and go to state 38


state 19

    8 listaVariable: IDF sep listaVariable .

    $default  reduce using rule 8 (listaVariable)


state 20

    2 TYPE: INT .

    $default  reduce using rule 2 (TYPE)


state 21

    4 TYPE: FLT .

    $default  reduce using rule 4 (TYPE)


state 22

    3 TYPE: CHR .

    $default  reduce using rule 3 (TYPE)


state 23

    9 listaVariable: IDF sepa TYPE .

    $default  reduce using rule 9 (listaVariable)


state 24

   43 IFCdn: IF . PARENTHESEGauche expressionC PARENTHESEDroite $@1 THEN Instruction elsebloc ENDIF

    PARENTHESEGauche  shift, and go to state 39


state 25

   49 CASECdn: CASE . PARENTHESEGauche IDF $@3 PARENTHESEDroite blocCase $@4 ENDCASE

    PARENTHESEGauche  shift, and go to state 40


state 26

   67 loop: FOR . PARENTHESEGauche Aff $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR

    PARENTHESEGauche  shift, and go to state 41


state 27

   19 Aff: IDF . AFFECTATION expressionA PNTV
   20    | IDF . CROCHETGauche ENTIER CROCHETDroite AFFECTATION expressionA PNTV

    AFFECTATION    shift, and go to state 42
    CROCHETGauche  shift, and go to state 43


state 28

    1 S: PROGRAM IDF Declaration Begin Instruction . End IDF

    End  shift, and go to state 44


state 29

   14 Instruction: Aff . Instruction

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 45
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 30

   15 Instruction: IFCdn . Instruction

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 46
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 31

   16 Instruction: CASECdn . Instruction

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 47
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 32

   17 Instruction: loop . Instruction

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 48
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 33

    5 Declaration: listaVariable PNTV Declaration .

    $default  reduce using rule 5 (Declaration)


state 34

   39 valeur: REEL .

    $default  reduce using rule 39 (valeur)


state 35

   40 valeur: ENTIER .

    $default  reduce using rule 40 (valeur)


state 36

   41 valeur: CCHAR .

    $default  reduce using rule 41 (valeur)


state 37

    6 Declaration: CONSTANT IDF AFFECTATION valeur . PNTV Declaration

    PNTV  shift, and go to state 49


state 38

   11 sep: CROCHETGauche ENTIER CROCHETDroite . VIRGULE
   13 sepa: CROCHETGauche ENTIER CROCHETDroite . DEUXP

    DEUXP    shift, and go to state 50
    VIRGULE  shift, and go to state 51


state 39

   43 IFCdn: IF PARENTHESEGauche . expressionC PARENTHESEDroite $@1 THEN Instruction elsebloc ENDIF

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36
    NOT     shift, and go to state 53

    expressionA  go to state 54
    expressionC  go to state 55
    valeur       go to state 56


state 40

   49 CASECdn: CASE PARENTHESEGauche . IDF $@3 PARENTHESEDroite blocCase $@4 ENDCASE

    IDF  shift, and go to state 57


state 41

   67 loop: FOR PARENTHESEGauche . Aff $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR

    IDF  shift, and go to state 27

    Aff  go to state 58


state 42

   19 Aff: IDF AFFECTATION . expressionA PNTV

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 59
    valeur       go to state 56


state 43

   20 Aff: IDF CROCHETGauche . ENTIER CROCHETDroite AFFECTATION expressionA PNTV

    ENTIER  shift, and go to state 60


state 44

    1 S: PROGRAM IDF Declaration Begin Instruction End . IDF

    IDF  shift, and go to state 61


state 45

   14 Instruction: Aff Instruction .

    $default  reduce using rule 14 (Instruction)


state 46

   15 Instruction: IFCdn Instruction .

    $default  reduce using rule 15 (Instruction)


state 47

   16 Instruction: CASECdn Instruction .

    $default  reduce using rule 16 (Instruction)


state 48

   17 Instruction: loop Instruction .

    $default  reduce using rule 17 (Instruction)


state 49

    6 Declaration: CONSTANT IDF AFFECTATION valeur PNTV . Declaration

    CONSTANT  shift, and go to state 5
    IDF       shift, and go to state 6

    $default  reduce using rule 7 (Declaration)

    Declaration    go to state 62
    listaVariable  go to state 8


state 50

   13 sepa: CROCHETGauche ENTIER CROCHETDroite DEUXP .

    $default  reduce using rule 13 (sepa)


state 51

   11 sep: CROCHETGauche ENTIER CROCHETDroite VIRGULE .

    $default  reduce using rule 11 (sep)


state 52

   26 expressionA: IDF . CROCHETGauche ENTIER CROCHETDroite
   27            | IDF .

    CROCHETGauche  shift, and go to state 63

    $default  reduce using rule 27 (expressionA)


state 53

   37 expressionC: NOT . expressionC

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36
    NOT     shift, and go to state 53

    expressionA  go to state 54
    expressionC  go to state 64
    valeur       go to state 56


state 54

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   29 expressionC: expressionA . SUP expressionA
   30            | expressionA . INF expressionA
   31            | expressionA . EQUAL expressionA
   32            | expressionA . SUPEQUAL expressionA
   33            | expressionA . INFEQUAL expressionA
   34            | expressionA . DIFF expressionA
   38            | expressionA .

    PLUS      shift, and go to state 65
    MINUS     shift, and go to state 66
    MUL       shift, and go to state 67
    DIV       shift, and go to state 68
    POW       shift, and go to state 69
    SUP       shift, and go to state 70
    INF       shift, and go to state 71
    EQUAL     shift, and go to state 72
    DIFF      shift, and go to state 73
    SUPEQUAL  shift, and go to state 74
    INFEQUAL  shift, and go to state 75

    $default  reduce using rule 38 (expressionC)


state 55

   35 expressionC: expressionC . AND expressionC
   36            | expressionC . OR expressionC
   43 IFCdn: IF PARENTHESEGauche expressionC . PARENTHESEDroite $@1 THEN Instruction elsebloc ENDIF

    AND               shift, and go to state 76
    OR                shift, and go to state 77
    PARENTHESEDroite  shift, and go to state 78


state 56

   28 expressionA: valeur .

    $default  reduce using rule 28 (expressionA)


state 57

   49 CASECdn: CASE PARENTHESEGauche IDF . $@3 PARENTHESEDroite blocCase $@4 ENDCASE

    $default  reduce using rule 47 ($@3)

    $@3  go to state 79


state 58

   67 loop: FOR PARENTHESEGauche Aff . $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR

    $default  reduce using rule 63 ($@7)

    $@7  go to state 80


state 59

   19 Aff: IDF AFFECTATION expressionA . PNTV
   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69
    PNTV   shift, and go to state 81


state 60

   20 Aff: IDF CROCHETGauche ENTIER . CROCHETDroite AFFECTATION expressionA PNTV

    CROCHETDroite  shift, and go to state 82


state 61

    1 S: PROGRAM IDF Declaration Begin Instruction End IDF .

    $default  reduce using rule 1 (S)


state 62

    6 Declaration: CONSTANT IDF AFFECTATION valeur PNTV Declaration .

    $default  reduce using rule 6 (Declaration)


state 63

   26 expressionA: IDF CROCHETGauche . ENTIER CROCHETDroite

    ENTIER  shift, and go to state 83


state 64

   35 expressionC: expressionC . AND expressionC
   36            | expressionC . OR expressionC
   37            | NOT expressionC .

    $default  reduce using rule 37 (expressionC)


state 65

   21 expressionA: expressionA PLUS . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 84
    valeur       go to state 56


state 66

   22 expressionA: expressionA MINUS . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 85
    valeur       go to state 56


state 67

   23 expressionA: expressionA MUL . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 86
    valeur       go to state 56


state 68

   24 expressionA: expressionA DIV . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 87
    valeur       go to state 56


state 69

   25 expressionA: expressionA POW . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 88
    valeur       go to state 56


state 70

   29 expressionC: expressionA SUP . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 89
    valeur       go to state 56


state 71

   30 expressionC: expressionA INF . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 90
    valeur       go to state 56


state 72

   31 expressionC: expressionA EQUAL . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 91
    valeur       go to state 56


state 73

   34 expressionC: expressionA DIFF . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 92
    valeur       go to state 56


state 74

   32 expressionC: expressionA SUPEQUAL . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 93
    valeur       go to state 56


state 75

   33 expressionC: expressionA INFEQUAL . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 94
    valeur       go to state 56


state 76

   35 expressionC: expressionC AND . expressionC

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36
    NOT     shift, and go to state 53

    expressionA  go to state 54
    expressionC  go to state 95
    valeur       go to state 56


state 77

   36 expressionC: expressionC OR . expressionC

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36
    NOT     shift, and go to state 53

    expressionA  go to state 54
    expressionC  go to state 96
    valeur       go to state 56


state 78

   43 IFCdn: IF PARENTHESEGauche expressionC PARENTHESEDroite . $@1 THEN Instruction elsebloc ENDIF

    $default  reduce using rule 42 ($@1)

    $@1  go to state 97


state 79

   49 CASECdn: CASE PARENTHESEGauche IDF $@3 . PARENTHESEDroite blocCase $@4 ENDCASE

    PARENTHESEDroite  shift, and go to state 98


state 80

   67 loop: FOR PARENTHESEGauche Aff $@7 . expressionC $@8 PNTV Aff1 PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36
    NOT     shift, and go to state 53

    expressionA  go to state 54
    expressionC  go to state 99
    valeur       go to state 56


state 81

   19 Aff: IDF AFFECTATION expressionA PNTV .

    $default  reduce using rule 19 (Aff)


state 82

   20 Aff: IDF CROCHETGauche ENTIER CROCHETDroite . AFFECTATION expressionA PNTV

    AFFECTATION  shift, and go to state 100


state 83

   26 expressionA: IDF CROCHETGauche ENTIER . CROCHETDroite

    CROCHETDroite  shift, and go to state 101


state 84

   21 expressionA: expressionA . PLUS expressionA
   21            | expressionA PLUS expressionA .
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA

    MUL  shift, and go to state 67
    DIV  shift, and go to state 68
    POW  shift, and go to state 69

    $default  reduce using rule 21 (expressionA)


state 85

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   22            | expressionA MINUS expressionA .
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA

    MUL  shift, and go to state 67
    DIV  shift, and go to state 68
    POW  shift, and go to state 69

    $default  reduce using rule 22 (expressionA)


state 86

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   23            | expressionA MUL expressionA .
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA

    POW  shift, and go to state 69

    $default  reduce using rule 23 (expressionA)


state 87

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   24            | expressionA DIV expressionA .
   25            | expressionA . POW expressionA

    POW  shift, and go to state 69

    $default  reduce using rule 24 (expressionA)


state 88

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   25            | expressionA POW expressionA .

    $default  reduce using rule 25 (expressionA)


state 89

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   29 expressionC: expressionA SUP expressionA .

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69

    $default  reduce using rule 29 (expressionC)


state 90

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   30 expressionC: expressionA INF expressionA .

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69

    $default  reduce using rule 30 (expressionC)


state 91

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   31 expressionC: expressionA EQUAL expressionA .

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69

    $default  reduce using rule 31 (expressionC)


state 92

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   34 expressionC: expressionA DIFF expressionA .

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69

    $default  reduce using rule 34 (expressionC)


state 93

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   32 expressionC: expressionA SUPEQUAL expressionA .

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69

    $default  reduce using rule 32 (expressionC)


state 94

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   33 expressionC: expressionA INFEQUAL expressionA .

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69

    $default  reduce using rule 33 (expressionC)


state 95

   35 expressionC: expressionC . AND expressionC
   35            | expressionC AND expressionC .
   36            | expressionC . OR expressionC

    $default  reduce using rule 35 (expressionC)


state 96

   35 expressionC: expressionC . AND expressionC
   36            | expressionC . OR expressionC
   36            | expressionC OR expressionC .

    AND  shift, and go to state 76

    $default  reduce using rule 36 (expressionC)


state 97

   43 IFCdn: IF PARENTHESEGauche expressionC PARENTHESEDroite $@1 . THEN Instruction elsebloc ENDIF

    THEN  shift, and go to state 102


state 98

   49 CASECdn: CASE PARENTHESEGauche IDF $@3 PARENTHESEDroite . blocCase $@4 ENDCASE

    CHECK    shift, and go to state 103
    DEFAULT  shift, and go to state 104

    $default  reduce using rule 54 (blocCase)

    blocCase  go to state 105


state 99

   35 expressionC: expressionC . AND expressionC
   36            | expressionC . OR expressionC
   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC . $@8 PNTV Aff1 PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR

    AND  shift, and go to state 76
    OR   shift, and go to state 77

    $default  reduce using rule 64 ($@8)

    $@8  go to state 106


state 100

   20 Aff: IDF CROCHETGauche ENTIER CROCHETDroite AFFECTATION . expressionA PNTV

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 107
    valeur       go to state 56


state 101

   26 expressionA: IDF CROCHETGauche ENTIER CROCHETDroite .

    $default  reduce using rule 26 (expressionA)


state 102

   43 IFCdn: IF PARENTHESEGauche expressionC PARENTHESEDroite $@1 THEN . Instruction elsebloc ENDIF

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 108
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 103

   51 blocCase: CHECK . condition1 expressionA $@5 SO Instruction blockEnd blocCase

    SUP       shift, and go to state 109
    INF       shift, and go to state 110
    EQUAL     shift, and go to state 111
    DIFF      shift, and go to state 112
    SUPEQUAL  shift, and go to state 113
    INFEQUAL  shift, and go to state 114

    condition1  go to state 115


state 104

   53 blocCase: DEFAULT . $@6 Instruction

    $default  reduce using rule 52 ($@6)

    $@6  go to state 116


state 105

   49 CASECdn: CASE PARENTHESEGauche IDF $@3 PARENTHESEDroite blocCase . $@4 ENDCASE

    $default  reduce using rule 48 ($@4)

    $@4  go to state 117


state 106

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 . PNTV Aff1 PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR

    PNTV  shift, and go to state 118


state 107

   20 Aff: IDF CROCHETGauche ENTIER CROCHETDroite AFFECTATION expressionA . PNTV
   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69
    PNTV   shift, and go to state 119


state 108

   43 IFCdn: IF PARENTHESEGauche expressionC PARENTHESEDroite $@1 THEN Instruction . elsebloc ENDIF

    ELSE  shift, and go to state 120

    $default  reduce using rule 46 (elsebloc)

    elsebloc  go to state 121


state 109

   57 condition1: SUP .

    $default  reduce using rule 57 (condition1)


state 110

   58 condition1: INF .

    $default  reduce using rule 58 (condition1)


state 111

   59 condition1: EQUAL .

    $default  reduce using rule 59 (condition1)


state 112

   62 condition1: DIFF .

    $default  reduce using rule 62 (condition1)


state 113

   60 condition1: SUPEQUAL .

    $default  reduce using rule 60 (condition1)


state 114

   61 condition1: INFEQUAL .

    $default  reduce using rule 61 (condition1)


state 115

   51 blocCase: CHECK condition1 . expressionA $@5 SO Instruction blockEnd blocCase

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 122
    valeur       go to state 56


state 116

   53 blocCase: DEFAULT $@6 . Instruction

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 123
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 117

   49 CASECdn: CASE PARENTHESEGauche IDF $@3 PARENTHESEDroite blocCase $@4 . ENDCASE

    ENDCASE  shift, and go to state 124


state 118

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 PNTV . Aff1 PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR

    IDF  shift, and go to state 125

    Aff1  go to state 126


state 119

   20 Aff: IDF CROCHETGauche ENTIER CROCHETDroite AFFECTATION expressionA PNTV .

    $default  reduce using rule 20 (Aff)


state 120

   45 elsebloc: ELSE . $@2 Instruction

    $default  reduce using rule 44 ($@2)

    $@2  go to state 127


state 121

   43 IFCdn: IF PARENTHESEGauche expressionC PARENTHESEDroite $@1 THEN Instruction elsebloc . ENDIF

    ENDIF  shift, and go to state 128


state 122

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   51 blocCase: CHECK condition1 expressionA . $@5 SO Instruction blockEnd blocCase

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69

    $default  reduce using rule 50 ($@5)

    $@5  go to state 129


state 123

   53 blocCase: DEFAULT $@6 Instruction .

    $default  reduce using rule 53 (blocCase)


state 124

   49 CASECdn: CASE PARENTHESEGauche IDF $@3 PARENTHESEDroite blocCase $@4 ENDCASE .

    $default  reduce using rule 49 (CASECdn)


state 125

   68 Aff1: IDF . AFFECTATION expressionA

    AFFECTATION  shift, and go to state 130


state 126

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 PNTV Aff1 . PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR

    PARENTHESEDroite  shift, and go to state 131


state 127

   45 elsebloc: ELSE $@2 . Instruction

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 132
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 128

   43 IFCdn: IF PARENTHESEGauche expressionC PARENTHESEDroite $@1 THEN Instruction elsebloc ENDIF .

    $default  reduce using rule 43 (IFCdn)


state 129

   51 blocCase: CHECK condition1 expressionA $@5 . SO Instruction blockEnd blocCase

    SO  shift, and go to state 133


state 130

   68 Aff1: IDF AFFECTATION . expressionA

    IDF     shift, and go to state 52
    REEL    shift, and go to state 34
    ENTIER  shift, and go to state 35
    CCHAR   shift, and go to state 36

    expressionA  go to state 134
    valeur       go to state 56


state 131

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite . DO $@9 Instruction $@10 ENDFOR

    DO  shift, and go to state 135


state 132

   45 elsebloc: ELSE $@2 Instruction .

    $default  reduce using rule 45 (elsebloc)


state 133

   51 blocCase: CHECK condition1 expressionA $@5 SO . Instruction blockEnd blocCase

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 136
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 134

   21 expressionA: expressionA . PLUS expressionA
   22            | expressionA . MINUS expressionA
   23            | expressionA . MUL expressionA
   24            | expressionA . DIV expressionA
   25            | expressionA . POW expressionA
   68 Aff1: IDF AFFECTATION expressionA .

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66
    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    POW    shift, and go to state 69

    $default  reduce using rule 68 (Aff1)


state 135

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite DO . $@9 Instruction $@10 ENDFOR

    $default  reduce using rule 65 ($@9)

    $@9  go to state 137


state 136

   51 blocCase: CHECK condition1 expressionA $@5 SO Instruction . blockEnd blocCase

    ENDCHECK  shift, and go to state 138

    $default  reduce using rule 56 (blockEnd)

    blockEnd  go to state 139


state 137

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite DO $@9 . Instruction $@10 ENDFOR

    IF    shift, and go to state 24
    CASE  shift, and go to state 25
    FOR   shift, and go to state 26
    IDF   shift, and go to state 27

    $default  reduce using rule 18 (Instruction)

    Instruction  go to state 140
    Aff          go to state 29
    IFCdn        go to state 30
    CASECdn      go to state 31
    loop         go to state 32


state 138

   55 blockEnd: ENDCHECK .

    $default  reduce using rule 55 (blockEnd)


state 139

   51 blocCase: CHECK condition1 expressionA $@5 SO Instruction blockEnd . blocCase

    CHECK    shift, and go to state 103
    DEFAULT  shift, and go to state 104

    $default  reduce using rule 54 (blocCase)

    blocCase  go to state 141


state 140

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite DO $@9 Instruction . $@10 ENDFOR

    $default  reduce using rule 66 ($@10)

    $@10  go to state 142


state 141

   51 blocCase: CHECK condition1 expressionA $@5 SO Instruction blockEnd blocCase .

    $default  reduce using rule 51 (blocCase)


state 142

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite DO $@9 Instruction $@10 . ENDFOR

    ENDFOR  shift, and go to state 143


state 143

   67 loop: FOR PARENTHESEGauche Aff $@7 expressionC $@8 PNTV Aff1 PARENTHESEDroite DO $@9 Instruction $@10 ENDFOR .

    $default  reduce using rule 67 (loop)
